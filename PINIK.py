import base64
exec(base64.b64decode(b'IyBPV05FUiBCWSBTQ1JJUFQgOiBNUiBQSU5JSwojIEdJVEhVQiBMSU5LIDogU0tCRVItQ1lCRVIKIyBNQUNLIEJZIDogTVIgUElOSUsgCiNfX19fX19fX19fX19fX19fX198IEZVTEwgU0NSSVBUIHxfX19fX19fX19fX19fc3VibWl0CmZyb20gb3MgaW1wb3J0IHBhdGgKZnJvbSB1cmxsaWIucmVxdWVzdCBpbXBvcnQgdXJsb3BlbgppbXBvcnQgb3MsYmFzZTY0LHpsaWIscGlwLHVybGxpYixwbGF0Zm9ybSxtYXRoLHNodXRpbCxyYW5kb20sdXVpZCxzdHJpbmcsaGFzaGxpYixqc29uLHN5cyx1dWlkLGdldHBhc3MKaW1wb3J0IG9zLGJhc2U2NCx6bGliLHBpcCx1cmxsaWIKaW1wb3J0IG9zLHpsaWIsdGltZSxkYXRldGltZQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQKZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sCmZyb20gdGltZSBpbXBvcnQgbG9jYWx0aW1lIGFzIGx0CmltcG9ydCBvcwppbXBvcnQgcmVxdWVzdHMKI2ltcG9ydCBodHRweAppbXBvcnQgb3MKaW1wb3J0IG9zLHpsaWIKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIG9zUlVCCmZyb20gb3MgaW1wb3J0IHN5c3RlbSBhcyBjbWQKb3Muc3lzdGVtKCdjbGVhcicpCnByaW50KCcgICAgICAgICBceDFiWzM4OzU7NDZtIFdFTENPTUUgVE8gUElOSUsgVDNSTVVYIFdPUkxEIFdPUkxEICAgICAgICAgICcpCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cyAKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcHJpbnQoJ1xuICBpbnN0YWxsaW5nIFJlcXVlc3RzIC4uLlxuJykKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQp0cnk6CiAgICBpbXBvcnQgY29uY3VycmVudC5mdXR1cmVzCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHByaW50KCdcbiAgaW5zdGFsbGluZyBmdXR1cmVzIC4uLlxuJykKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgZnV0dXJlcycpICAgIAp0cnk6CiAgICBpbXBvcnQgbWVjaGFuaXplCmV4Y2VwdCBNb2R1bGVOb3RGb3VuZEVycm9yOgogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBtZWNoYW5pemUgPiAvZGV2L251bGwnKQpmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0LCB1cmxvcGVuCmltcG9ydCBvcywgcmVxdWVzdHMsIHJlLHBsYXRmb3JtLCBzeXMsIHJhbmRvbSwgc3VicHJvY2VzcywgdGhyZWFkaW5nLCBpdGVydG9vbHMsYmFzZTY0LHV1aWQsemxpYixyZSxqc29uLHV1aWQsc3VicHJvY2VzcyxzaHV0aWwsd2ViYnJvd3Nlcix0aW1lLGpzb24sc3lzLHJhbmRvbSxkYXRldGltZSx0aW1lLHJlLHN1YnByb2Nlc3MscGxhdGZvcm0sc3RyaW5nLGpzb24sdGltZSxyZSxyYW5kb20sc3lzLHN0cmluZyx1dWlkCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgSmFoaWRQSU5JSwpmcm9tIHN0cmluZyBpbXBvcnQgKiAKZnJvbSByYW5kb20gaW1wb3J0IHJhbmRpbnQKZnJvbSB0aW1lIGltcG9ydCBzbGVlcCBhcyBzbHAKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGNtZApmcm9tIHpsaWIgaW1wb3J0IGRlY29tcHJlc3MgCmltcG9ydCBvcywgcGxhdGZvcm0KaW1wb3J0IHJlcXVlc3RzLGJzNCxqc29uLG9zLHN5cyxyYW5kb20sZGF0ZXRpbWUsdGltZSxyZSxzdHJpbmcKaW1wb3J0IHVybGxpYjMscmljaCxiYXNlNjQKZnJvbSByaWNoLnRhYmxlIGltcG9ydCBUYWJsZSBhcyBtZQpmcm9tIHJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZSBhcyBzb2wKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgc29wCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IgYXMgdHJlZApmcm9tIHJpY2guY29uc29sZSBpbXBvcnQgR3JvdXAgYXMgZ3AKZnJvbSByaWNoLnBhbmVsIGltcG9ydCBQYW5lbCBhcyBuZWwKZnJvbSByaWNoLm1hcmtkb3duIGltcG9ydCBNYXJrZG93biBhcyBtYXJrCmZyb20gcmljaC5jb2x1bW5zIGltcG9ydCBDb2x1bW5zIGFzIGNvbApmcm9tIHJpY2ggaW1wb3J0IHByZXR0eQpmcm9tIHJpY2gudGV4dCBpbXBvcnQgVGV4dCBhcyB0ZWt6CmZyb20gdGltZSBpbXBvcnQgbG9jYWx0aW1lIGFzIGx0CmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3IKZmFzdF93b3JrID0gVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTE1KS5zdWJtaXQKI19fX19fX19fX19fX19fX19fX3wgQ09MT1VSIHxfX19fX19fX19fX19fX19fX18jClMgPSAnXDAzM1sxOzM3bSc7QSA9ICdceDFiWzM4OzU7MjA4bSc7UiA9ICdceDFiWzM4OzU7NDZtJztGID0gJ1x4MWJbMzg7NTs0OG0nO1ogPSAnXDAzM1sxOzMzbSc7QSA9ICdceDFiWzE7OTdtJztSID0gJ1x4MWJbMzg7NTsxOTZtJztZID0gJ1wwMzNbMTszM20nO0cgPSAnXHgxYlszODs1OzQ4bSc7aCA9ICdceDFiWzM4OzU7NDhtJztCID0gJ1x4MWJbMzg7NTs4bSc7RzEgPSAnXHgxYlszODs1OzQ2bSc7RzIgPSAnXHgxYlszODs1OzQ3bSc7RzMgPSAnXHgxYlszODs1OzQ4bSc7RzQgPSAnXHgxYlszODs1OzQ5bSc7RzUgPSAnXHgxYlszODs1OzUwbSc7WCA9ICdcMzNbMTszNG0nO1gxID0gJ1x4MWJbMzg7NTsxNG0nO1gyID0gJ1x4MWJbMzg7NTsxMjNtJztYMyA9ICdceDFiWzM4OzU7MTIybSc7WDQgPSAnXHgxYlszODs1Ozg2bSc7WDUgPSAnXHgxYlszODs1OzEyMW0nO1MgPSAnXHgxYlsxOzk2bSc7VyA9ICdceDFiWzM4OzU7MTk2bSc7aGggPSAnXDAzM1szNDsxbScKI19fX19fX19fX19fX19fX19fX3wgTE9PUCBDT0RFIHxfX19fX19fX19fX19fX19fX18jCmxvb3A9MDtva3M9W107Y3BzPVtdO3BjcD1bXTtpZD1bXTt0b2tlbmt1PVtdO2NvdW50ID0gMDtsb29wID0gMDtsaW0gPSAwO3RwID0gMDtva3M9W107Y3BzY3NwcyA9W107Y29raXggPSBbXTtsb29wPTA7b2tzID0gW107Y3BzID0gW107Y3B4ID0gW107b2sgPSBbXTtjcCA9IFtdO2lkID0gW107cHMgPSBbXTtzaWQgPSBbXTt0b3RhbD1bXTt1c2VyID1bXTttZXRob2RzID0gW107c3JhbmdlID0gMDtzYXZlZCA9IFtdO3RvdGFsZG1wID0gMDtmaWx0ZXIgPSBbXTtqYWhpZF94ID0gW10KI19fX19fX19fX19fX19fX19fX1sgTE9BRElORyBdX19fX19fX19fX19fX19fX19fIwppbXBvcnQgb3MsIHBsYXRmb3JtLCB0aW1lLCBzeXMKaW1wb3J0IG9zLHJhbmRvbSxzeXMsdGltZSAKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIF9sb2FkaW5nXyAgCmRlZiBsb2FkaW5nKCk6IAogICAgYW5pbWF0aW9uID0gWyJbXHgxYlsxOzkxbeKWoFx4MWJbMG3ilqHilqHilqHilqHilqHilqHilqHilqHilqFdIiwiW1x4MWJbMTs5Mm3ilqDilqBceDFiWzBt4pah4pah4pah4pah4pah4pah4pah4pahXSIsICJbXHgxYlsxOzkzbeKWoOKWoOKWoFx4MWJbMG3ilqHilqHilqHilqHilqHilqHilqFdIiwgIltceDFiWzE7OTRt4pag4pag4pag4pagXHgxYlswbeKWoeKWoeKWoeKWoeKWoeKWoV0iLCAiW1x4MWJbMTs5NW3ilqDilqDilqDilqDilqBceDFiWzBt4pah4pah4pah4pah4pahXSIsICJbXHgxYlsxOzk2beKWoOKWoOKWoOKWoOKWoOKWoFx4MWJbMG3ilqHilqHilqHilqFdIiwgIltceDFiWzE7OTdt4pag4pag4pag4pag4pag4pag4pagXHgxYlswbeKWoeKWoeKWoV0iLCAiW1x4MWJbMTs5OG3ilqDilqDilqDilqDilqDilqDilqDilqBceDFiWzBt4pah4pahXSIsICJbXHgxYlsxOzk5beKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoFx4MWJbMG3ilqFdIiwgIltceDFiWzE7OTEwbeKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoOKWoFx4MWJbMG1dIl0gCiAgICBmb3IgaSBpbiByYW5nZSg1MCk6IAogICAgICAgIHRpbWUuc2xlZXAoMC4xKSAKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJ7QX1be0cxfSt7QX1de0cxfSBMT0FESU5HLi4uICIgKyBhbmltYXRpb25baSAlIGxlbihhbmltYXRpb24pXSArIlx4MWJbMG0gIikgCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpIAp0aW1lLnNsZWVwKDIpCiNfX19fX19fX19fX19fX19fX198IERBVEUgQ09ERSB8X19fX19fX19fX19fX19fX19fIwpkaWMgPSB7JzEnOidKQU5VQVJZJywnMic6J0ZFQlJVQVJZJywnMyc6J01BUkNIJywnNCc6J0FQUklMJywnNSc6J01BWScsJzYnOidKVU5FJywnNyc6J0pVTFknLCc4JzonQVVHVVNUJywnOSc6J1NFUFRFTUJFUicsJzEwJzonT0NUT0JFUicsJzExJzonTk9WRU1CRVInLCcxMic6J0RFQ0VNQkVSJ30KZGljMiA9IHsnMDEnOidKQU5VQVJZJywnMDInOidGRUJSVUFSWScsJzAzJzonTUFSQ0gnLCcwNCc6J0FQUklMJywnMDUnOidNQVknLCcwNic6J0pVTkUnLCcwNyc6J0pVTFknLCcwOCc6J0FVR1VTVCcsJzA5JzonU0VQVEVNQkVSJywnMTAnOidPQ1RPQkVSJywnMTEnOidOT1ZFTUJFUicsJzEyJzonREVWRU1CRVInfQp0Z2wgPSBkYXRldGltZS5kYXRldGltZS5ub3coKS5kYXkKYmxuID0gZGljWyhzdHIoZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkubW9udGgpKV0KdGhuID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkueWVhcgpkYXRlID0gc3RyKHRnbCkrICdceDFiWzM4OzU7MTk2bSDilLxceDFiWzM4OzU7NDZtICcgK3N0cihibG4pKyAnIFx4MWJbMzg7NTsxOTZt4pS8XHgxYlszODs1OzQ2bSAnICtzdHIodGhuKQojX19fX19fX19fX19fX19fX19ffCBMSU5FWCB8X19fX19fX19fX19fX19fX19fIwpzeXMuc3Rkb3V0LndyaXRlKCdceDFiXTI7PPCfkppNUi1QSU5JS/Cfkpo+XHgwNycpCmRlZiBsaW5leCgpOnByaW50KGYne2hofeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSAnKQpkZWYgY2xlYXIoKTpvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQobG9nbykKI19fX19fX19fX19fX19fX19fX1sgS0VZIERFRiBdX19fX19fX19fX19fX19fX19fIwp1aWQgPSBvcy5nZXR1aWQoKQp1dWlkZCA9IHN0cihvcy5nZXRldWlkKCkpICsgc3RyKG9zLmdldGxvZ2luKCkpICsgc3RyKG9zLmdldHVpZCgpKQprZXk0PShmIj0oTVIpPXt1aWR9PShQSU5JSyk9IikKZGVmIGFwdigpOgoJdHJ5OgoJCWZyZXNoKCkKCQlhcGw9c3RyKHpsaWIuZGVjb21wcmVzcyhiJ3hceDljXHhjYigpKShceGI2XHhkMlx4ZDdPLCgoXHhhYkhceGQxS1x4Y2FceGM5Ty8uXHhjOC9ceGQxS1x4Y2VceGNmXHhkNTcyMDJceGQyNzRceGQ0XHgwN1x4OGFnXHg5NFx4ZTRceGU2XHgwMFx4MDBVXHhiYVx4MGVceGQ4JykpCgkJYXBsaz1hcGwucmVwbGFjZSgiYiciLCIiKS5yZXBsYWNlKCInIiwiIikKCQlhcGxuaz1hcGxrCgkJbGluaz1odHRweC5nZXQoJ2h0dHBzOi8va2luZ1BJTklLODAuYmxvZ3Nwb3QuY29tLzIwMjQvMDUveC5odG1sJykudGV4dAoJCWZyZXNoKCkKCQlpZiBrZXk0IGluIGxpbms6ZnJlc2goKTtNYWluKCkKCQllbHNlOgkgCgkJCWZyZXNoKCk7bG9hZGluZygpO2ZyZXNoKCkKCQkJcHJpbnQoZiJ7QX1be0cxfSt7QX1de0cxfSBZT1VSIE5PVCBQUkVNSVVNIFVTRVIuLi4hXDAzM1sxOzM3bSIpO3RpbWUuc2xlZXAoMykKCQkJZnJlc2goKQoJCQlwcmludChmIntBfVt7RzF9K3tBfV17RzF9IFRPREFZIERBVEUge0cxfeKUgXtSfT57RzF9IHtkYXRlfSIpCgkJCXByaW50KGYie0F9W3tHMX0re0F9XXtHMX0gWU9VUiBLRVkgTk9UIFJFR0lTVEVSRUQiKQoJCQlwcmludChmIntBfVt7RzF9K3tBfV17RzF9IE5PVEU6IElGIFlPVSBBUkUgRlJFRSBVU0VSIERPTidUIENPTUUgSUIiKQoJCQlwcmludChmIntBfVt7RzF9K3tBfV17RzF9IFlPVVIgS0VZIHtHMX3ilIF7Un0+e1l9IHtrZXk0fSIpCgkJCXByaW50KGYie0F9W3tHMX0re0F9XXtHMX0gWU9VUiBTVUJTQ1JJUFRJT04gREFURSBFWFBJUkUiKQoJCQlwcmludChmIntBfVt7RzF9K3tBfV17RzF9IE9LIElEIEpVU1QgTk9XIExPR0lOIFRPT0wiKQoJCQlpbnB1dChmIntBfVt7RzF9K3tBfV17RzF9IFBSRVNTIEVOVEVSIFRPIENPTlRBQ1QgV0lUSCBBRE1JTiIpCgkJCXVybF93YSA9ICJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT0rODgwMTkyNDcwOTU1MiZ0ZXh0PSIKCQkJdGtzID0gKCJISSBQSU5JSyBTSVIsIEkgTkVFRCBUTyBCVVkgWU9VUiBQQUlEIFBJTklLIFRPT0xTIFZFUlNJT04gWCBQUkVNSVVNIFBMRUFTRSBBQ0NFUFQgTVkgS0VZIFRPIFBSRU1JVU06KVxuS0VZIDotICIra2V5NCkKCQkJc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJhbSIsICJzdGFydCIsIHVybF93YSsodGtzKV0pO3RpbWUuc2xlZXAoMikKCQkJZXhwaXJlZF9jaygpCglleGNlcHQgVmFsdWVFcnJvcjoKCQlleGl0KCkKCWV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKCQlwcmludCgnXG4gTm8gaW50ZXJuZXQgY29ubmVjdGlvbiAuLi4nKQoJCWV4aXQoKQojX19fX19fX19fX19fX19fX19fWyBVQSBERUYgXV9fX19fX19fX19fX19fX19fXyMKCmRlZiB1X2EoKToKICAgIGcgPSAiW0ZCQU4vRkI0QTtGQkFWLzEwNi4wLjAuMjYuNjg7RkJCVi80NTkwNDE2MDtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xOTIwfTtGQkxDL2l0X0lUO0ZCUlYvNDU5MDQxNjA7RkJDUi9HcmFtZWVucGhvbmU7RkJNRi9hc3VzO0ZCQkQvYXN1cztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9BU1VTX1owMTZEO0ZCU1YvNS4wO0ZCT1AvMTtGQkNBL3g4Njphcm1lYWJpLXY3YTtdIgogICAgcmV0dXJuICJbRkJBTi9GQjRBO0ZCQVYvIitzdHIocmFuZG9tLnJhbmRpbnQoMTEsNzcpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDksNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTEsNzcpKSArIjtGQkJWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMTEsNzc3Nzc3NykpKyI7IitnCgpkZWYgdV9hMSgpOgogICAgZyA9ICJbRkJBTi9GQjRBO0ZCQVYvNjEuMC4wLjE1LjY5O0ZCQlYvMjA3NDgwNTg7RkJETS97ZGVuc2l0eT0zLjAsd2lkdGg9MTA4MCxoZWlnaHQ9MTkyMH07RkJMQy9lbl9VUztGQkNSL0JhbmdsYWxpbms7RkJNRi9PbmVQbHVzO0ZCQkQvb25lcGx1cztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9PbmU7RkJTVi80LjQuMjtudWxsRkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10iCiAgICByZXR1cm4gIltGQkFOL0ZCNEE7RkJBVi8iK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpICsiO0ZCQlYvIitzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw3Nzc3Nzc3KSkrIjsiK2cKICAgICAgICAKZGVmIHdpbmRvd3MoKToKICAgIGFWPXN0cihyYW5kb20uY2hvaWNlKHJhbmdlKDEwLDIwKSkpCiAgICBBPWYiTW96aWxsYS81LjAgKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQge3N0cihyYW5kb20uY2hvaWNlKHJhbmdlKDUsNykpKX0uMTsgZW4tVVMpIEFwcGxlV2ViS2l0LzUzNC57YVZ9IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lL3tzdHIocmFuZG9tLmNob2ljZShyYW5nZSg4LDEyKSkpfS4wLntzdHIocmFuZG9tLmNob2ljZShyYW5nZSg1NTIsNjYxKSkpfS4wIFNhZmFyaS81MzQue2FWfSIKICAgIGJWPXN0cihyYW5kb20uY2hvaWNlKHJhbmdlKDEsMzYpKSkKICAgIGJ4PXN0cihyYW5kb20uY2hvaWNlKHJhbmdlKDM0LDM4KSkpCiAgICBiej1mIjV7Ynh9LntiVn0iCiAgICBCPWYiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQge3N0cihyYW5kb20uY2hvaWNlKHJhbmdlKDUsNykpKX0ue3N0cihyYW5kb20uY2hvaWNlKFsnMicsJzEnXSkpfSkgQXBwbGVXZWJLaXQve2J6fSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS97c3RyKHJhbmRvbS5jaG9pY2UocmFuZ2UoMTIsNDIpKSl9LjAue3N0cihyYW5kb20uY2hvaWNlKHJhbmdlKDc0MiwyMjAwKSkpfS57c3RyKHJhbmRvbS5jaG9pY2UocmFuZ2UoMSwxMjApKSl9IFNhZmFyaS97Ynp9IgogICAgY1Y9c3RyKHJhbmRvbS5jaG9pY2UocmFuZ2UoMSwzNikpKQogICAgY3g9c3RyKHJhbmRvbS5jaG9pY2UocmFuZ2UoMzQsMzgpKSkKICAgIGN6PWYiNXtjeH0ue2NWfSIKICAgIEM9ZiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LntzdHIocmFuZG9tLmNob2ljZShbJzInLCcxJ10pKX07IFdPVzY0KSBBcHBsZVdlYktpdC97Y3p9IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lL3tzdHIocmFuZG9tLmNob2ljZShyYW5nZSgxMiw0MikpKX0uMC57c3RyKHJhbmRvbS5jaG9pY2UocmFuZ2UoNzQyLDIyMDApKSl9LntzdHIocmFuZG9tLmNob2ljZShyYW5nZSgxLDEyMCkpKX0gU2FmYXJpL3tjen0iCiAgICBEPWYiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMS4wLntzdHIocmFuZG9tLmNob2ljZShyYW5nZSgxLDcxMjApKSl9LjAgU2FmYXJpLzUzNy4zNiIKICAgIHJldHVybiByYW5kb20uY2hvaWNlKFtBLEIsQyxEXSkKI19fX19fX19fX19fX19fX19fX3wgTE9HTyB8X19fX19fX19fX19fX19fX19fIwpsb2dvPWYiIiJ7RzF9CuKWiOKWiOKWiOKWiOKWiOKWiCAg4paI4paIIOKWiOKWiOKWiCAgICDilojilogg4paI4paIIOKWiOKWiCAgIOKWiOKWiCAK4paI4paIICAg4paI4paIIOKWiOKWiCDilojilojilojiloggICDilojilogg4paI4paIIOKWiOKWiCAg4paI4paIICAK4paI4paI4paI4paI4paI4paIICDilojilogg4paI4paIIOKWiOKWiCAg4paI4paIIOKWiOKWiCDilojilojilojilojiloggICAK4paI4paIICAgICAg4paI4paIIOKWiOKWiCAg4paI4paIIOKWiOKWiCDilojilogg4paI4paIICDilojiloggIArilojiloggICAgICDilojilogg4paI4paIICAg4paI4paI4paI4paIIOKWiOKWiCDilojiloggICDilojiloggCntoaH3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEKe0F9W3tHMX0re0F9XXtHMX0gREVWRUxPUEVSICB7RzF94pSBe1J9PntHMX0gTVJ7WX0te0cxfVBJTklLCntBfVt7RzF9K3tBfV17RzF9IEdJVEhVQiAgICAge0cxfeKUgXtSfT57RzF9IFBJTklLe1l9LXtHMX1YCntBfVt7RzF9K3tBfV17RzF9IEZBQ0VCT09LICAgICB7RzF94pSBe1J9PntHMX0gTVIte1l9LXtHMX1QSU5JSwp7QX1be0cxfSt7QX1de0cxfSBUT09MUyAgICAgIHtHMX3ilIF7Un0+e0cxfSBSQU5ET00Ke0F9W3tHMX0re0F9XXtHMX0gVkVSU0lPTiAgICB7RzF94pSBe1J9PntHMX0gMHtZfS97RzF9MSB7Un0oe0cxfT17WX1QUkVNSVVNe0cxfT17Un0pCntoaH3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiIiIKCiNfX19fX19fX19fX19fX19fX198IFBBU1MgfF9fX19fX19fX19fX19fX19fXyMJCmltcG9ydCBnZXRwYXNzCgphdHRlbXBzID0gMAoKd2hpbGUgYXR0ZW1wcyA8IDEyMzQ1Njc3OTAxOgogICAgY2xlYXIoKTtrZXlsID0gaW5wdXQoZidceDFiWzM4OzU7MjQ0bShceDFiWzE7OTdt4pyYXHgxYlszODs1OzI0NG0pXHgxYlszODs1OzQ2bSBMSUNFTlNFIEtFWSBceDFiWzM4OzU7MjQ0beKAk1x4MWJbMzg7NTs0Nm3inqQgXHgxYlszODs1OzQ2bSAnKQogICAgaWYga2V5bCA9PScwJzoKICAgICAgICBicmVhawogICAgZWxzZToKICAgICAgICBwcmludChmJ1x4MWJbMzg7NTsyNDRtKFx4MWJbMTs5N23inJhceDFiWzM4OzU7MjQ0bSlceDFiWzM4OzU7NDZtIElOQ09SUkVDVCBMSUNFTlNFIEtFWSBQTEVBU0UgVFJZSU5HICcpO3RpbWUuc2xlZXAoMSkKICAgICAgICBwcmludChmJ1x4MWJbMzg7NTsyNDRtKFx4MWJbMTs5N23inJhceDFiWzM4OzU7MjQ0bSlceDFiWzM4OzU7NDZtIFRSWUlORyBSRUFMIExJQ0VOU0UgS0VZJyk7dGltZS5zbGVlcCg4KQogICAgICAgIGF0dGVtcHMgKz0gMQogICAgICAgIGNvbnRpbnVlCm9zLnN5c3RlbSgnY2xlYXInKQpwYXNzCiNfX19fX19fX19fX19fX19fX198IE1BSU4gfF9fX19fX19fX19fX19fX19fXyMKZGVmIE1haW4oKToKCSAgIGNsZWFyKCkgIAkgICAKCSAgIHByaW50KGYie0F9W3tHMX0xe0F9XXtHMX0gUkFORE9NIENSQUNLIHtBfVt7RzF9QkVTVHtBfV0iKQkgICAKCSAgIHByaW50KGYie0F9W3tHMX0ye0F9XXtHMX0gQ09OVEFDVCBUT09MIEFETUlOICIpCgkgICBwcmludChmIntBfVt7RzF9M3tBfV17RzF9IEVYSVQiKTtsaW5leCgpCgkgICBqYWhpZCA9aW5wdXQoZid7QX1be0cxfSt7QX1de0cxfSBJTlBVVCB7QX06IHtHMX0nKQkgICAKCSAgIGlmIGphaGlkPT0iMSI6UmFuZG1fQ3JhY2soKQoJICAgaWYgamFoaWQ9PSIyIjpvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9tclBJTklLeGQnKTtNYWluKCkJICAgCgkgICBpZiBqYWhpZD09IjMiOmV4aXQoKTsJCiNfX19fX19fX19fX19fX19fX198IFJBTkRPTV9DUkFDSyB8X19fX19fX19fX19fX19fX19fIyAJCQpkZWYgUmFuZG1fQ3JhY2soKToKCWNsZWFyKCkKCXByaW50KGYne0F9W3tHMX0xe0F9XXtHMX0gQkFOR0xBREVTSCBDUkFDSycpCglwcmludChmJ3tBfVt7RzF9MntBfV17RzF9IElORElBIENSQUNLJykKCXByaW50KGYne0F9W3tHMX0ze0F9XXtHMX0gRVhJVCcpO2xpbmV4KCkKCWphaGlkcm4gPWlucHV0KGYne0F9W3tHMX0re0F9XXtHMX0gSU5QVVQge0F9OiB7RzF9JykKCWlmIGphaGlkcm49PSIxIjpfYmRfKCkKCWlmIGphaGlkcm49PSIyIjpfSW5kaWFfKCkKCWlmIGphaGlkcm49PSIzIjpleGl0KCk7CiNfX19fX19fX19fX19fX19fX198IFJBTkRPTV9DUkFDSyBCRCB8X19fX19fX19fX19fX19fX19fIyAJCQpkZWYgX2JkXygpOgogICAgY2xlYXIoKQogICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBFWEFNUExFIHtBfTp7RzF9IDAxN3tBfS97RzF9MDE5e0F9L3tHMX0wMTh7QX0ve0cxfTAxNicpO2xpbmV4KCkKICAgIGNvZGUgPSBpbnB1dChmJ3tBfVt7RzF9K3tBfV17RzF9IENIT0lDRSAge0F9OntHMn0gJykKICAgIG5hbWUgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpCiAgICBjb2QgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoMikpCiAgICBjbGVhcigpCiAgICBwcmludChmJ3tBfVt7RzF9K3tBfV17RzF9IEVYQU1QTEUge0F9OntHM30gMzAwMHtBfS97RzN9NTAwMHtBfS97RzN9MTAwMDB7QX0ve0czfTk5OTk5Jyk7bGluZXgoKQogICAgbGltaXQgPSBpbnQoaW5wdXQoZid7QX1be0cxfSt7QX1de0cxfSBDSE9JQ0UgIHtBfTp7RzR9ICcpKQogICAgY2xlYXIoKQogICAgcHJpbnQoZidcMzNbMTszN21cMDMzWzkyOzFtW1wwMzNbMTszN21BXDAzM1s5MjsxbV0gXDAzM1sxOzM3bU1FVEhPXDAzM1s5MjsxbURcMDMzWzE7MzdtIFtcMDMzWzE7MzBtLUZBU1RcMDMzWzE7MzBtLVwwMzNbMTszN21dJykKICAgIHByaW50KGYnXDMzWzE7MzdtXDAzM1s5MjsxbVtcMDMzWzE7MzdtQlwwMzNbOTI7MW1dIFwwMzNbMTszN21NRVRIT1wwMzNbOTI7MW1EXDAzM1sxOzM3bSBbXDAzM1sxOzMwbS1CRVNUXDAzM1sxOzMwbS1cMDMzWzE7MzdtXScpCiAgICBsaW5leCgpCiAgICBtdGhkeD1pbnB1dChmJ1wwMzNbOTI7MW1bPCs+XVwwMzNbMTszN20gU0VMRUNUIE1FVEhPRCA6XDAzM1s5MjsxbSAnKSAKICAgIGZvciB4IGluIHJhbmdlKGxpbWl0KToKICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNCkpCiAgICAgICAgdXNlci5hcHBlbmQobm1wKQogICAgY2xlYXIoKQogICAgd2l0aCBKYWhpZFBJTklLKG1heF93b3JrZXJzPTMwKSBhcyBzZXh5OgogICAgICAgIGNsZWFyKCkKICAgICAgICBwcmludChmJ3tBfVt7RzF9K3tBfV17RzF9IFNJTSBOQU1FIHtBfToge1l9Uk9CSXtHMX0ve1l9QkFOR0xBTElOSycpCiAgICAgICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBTSU0gQ09ERSB7QX06e0cxfSB7Y29kZX0nKQogICAgICAgIHByaW50KGYne0F9W3tHMX0re0F9XXtHMX0gVE9UQUwgVUlEIHtBfTp7RzJ9IHtzdHIobGVuKHVzZXIpKX0nKQogICAgICAgIHByaW50KGYne0F9W3tHMX0re0F9XXtHMX0gVFVSTiB7Un0oe0cxfU9Oe1J9fHtHMX1PRkZ7Un0pIHtHMX1BSVJQTEFORSBNT0RFIEVWRVJZIDMgTUlOJyk7bGluZXgoKQogICAgICAgIGZvciBsb3ZlIGluIHVzZXI6CiAgICAgICAgICAgIGlkcyA9IGNvZGUrbmFtZStjb2QrbG92ZQogICAgICAgICAgICBwc2QgPSBbY29kZStuYW1lK2NvZCtsb3ZlLGNvZCtsb3ZlLG5hbWUrbG92ZSxjb2RlK25hbWUrY29kLCdAQEAjIyMnLCdiYW5nbGFkZXNoJywnQmFuZ2xhZGVzaCcsJ21laGVkaScsJ21hYmFiYScsJ3Rhbml5YScsJ3N1bWFpeWEnLCdzYWlmdWwnLCdqYW5uYXR1bCcsJ0ZhdGVtYScsJ2ZhcmphbmEnLCdzYWJiaXInLCdodW1haXJhJywnYWxhbWluJywnbWltbWltJywnYWFhYmJiJywnaHJpZG95JywnZmFyaXlhJywnc2hha2lsJywncm9rc2FuYScsJ21hZml5YScsJ2hhYmliYScsJ2ZyZWUgZmlyZScsJ3NoYWhpbicsJ2kgbG92ZSB5b3UnLCdzYWRpeWEnLCdheWVzaGEnLCdudXNyYXQnLCdCYW5nbGEnLCdhcmZhbkAjJywnZ2FtaW5nJywndGFtYW5uYScsJ2phbm5hdCcsJ2xhYm9uaSddCiAgICAgICAgICAgIGlmIG10aGR4IGluIFsnQScsJzEnXTpzZXh5LnN1Ym1pdChyYW5kbSxpZHMscHNkKSAgICAgICAgICAgIAkKICAgICAgICAgICAgaWYgbXRoZHggaW4gWydCJywnMiddOnNleHkuc3VibWl0KHJhbmRtMSxpZHMscHNkKSAKICAgIHByaW50KCcnKQogICAgbGluZXgoKQogICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBUSEUgUFJPQ0VTUyBIQVMgQkVFTiBDT01QTEVURUQnKQogICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBUT1RBTCBPSyBJRCB7QX06e0cyfSB7c3RyKGxlbihvaykpfScpCiAgICBwcmludChmJ3tBfVt7RzF9K3tBfV17RzF9IFRPVEFMIENQIElEIHtBfTp7RzN9IHtzdHIobGVuKGNwKSl9JykKICAgIGxpbmV4KCkKICAgIGlucHV0KGYne0F9W3tHMX0re0F9XXtHMX0gUFJFU1MgRU5URVIgVE8gQkFDSyAnKQogICAgTWFpbigpCiNfX19fX19fX19fX19fX19fX198IFJBTkRPTV9DUkFDSyBJTiB8X19fX19fX19fX19fX19fX19fIyAJCQpkZWYgX0luZGlhXygpOgogICAgY2xlYXIoKQogICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBFWEFNUExFIHtBfTp7RzF9ICs5MTYzOXtBfS97RzF9KzkxOTM0e0F9L3tHMX0rOTE5MDJ7QX0ve0cxfSs5MTcwMScpO2xpbmV4KCkKICAgIGNvZGUgPSBpbnB1dChmJ3tBfVt7RzF9K3tBfV17RzF9IENIT0lDRSAge0F9OntHMn0gJykKICAgIGNsZWFyKCkKICAgIHByaW50KGYne0F9W3tHMX0re0F9XXtHMX0gRVhBTVBMRSB7QX06e0cxfSAzMDAwe0F9L3tHMX01MDAwe0F9L3tHMX0xMDAwMHtBfS97RzF9OTk5OTknKTtsaW5leCgpCiAgICBsaW1pdCA9IGludChpbnB1dChmJ3tBfVt7RzF9K3tBfV17RzF9IENIT0lDRSAge0F9OntHMn0gJykpCiAgICBjbGVhcigpCiAgICBwcmludChmJ1wzM1sxOzM3bVwwMzNbOTI7MW1bXDAzM1sxOzM3bUFcMDMzWzkyOzFtXSBcMDMzWzE7MzdtTUVUSE9cMDMzWzkyOzFtRFwwMzNbMTszN20gW1wwMzNbMTszMG0tRkFTVFwwMzNbMTszMG0tXDAzM1sxOzM3bV0nKQogICAgcHJpbnQoZidcMzNbMTszN21cMDMzWzkyOzFtW1wwMzNbMTszN21CXDAzM1s5MjsxbV0gXDAzM1sxOzM3bU1FVEhPXDAzM1s5MjsxbURcMDMzWzE7MzdtIFtcMDMzWzE7MzBtLUJFU1RcMDMzWzE7MzBtLVwwMzNbMTszN21dICcpICAgIAogICAgbGluZXgoKQogICAgbXRoZHg9aW5wdXQoZidcMDMzWzkyOzFtWzwrPl1cMDMzWzE7MzdtIFNFTEVDVCBNRVRIT0QgOlwwMzNbOTI7MW0gJykgCiAgICBmb3IgeCBpbiByYW5nZShsaW1pdCk6CiAgICAgICAgbm1wID0gIiIuIGpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg3KSkKICAgICAgICB1c2VyLmFwcGVuZChubXApCiAgICBjbGVhcigpCiAgICB3aXRoIEphaGlkUElOSUsobWF4X3dvcmtlcnM9MzApIGFzIHNleHk6CiAgICAgICAgY2xlYXIoKQogICAgICAgIHByaW50KGYne0F9W3tHMX0re0F9XXtHMX0gU0lNIE5BTUUge0F9OiB7WX1ST0JJe0cxfS97WX1CQU5HTEFMSU5LJykKICAgICAgICBwcmludChmJ3tBfVt7RzF9K3tBfV17RzF9IFNJTSBDT0RFIHtBfTp7RzF9IHtjb2RlfScpCiAgICAgICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBUT1RBTCBVSUQge0F9OntHMn0ge3N0cihsZW4odXNlcikpfScpCiAgICAgICAgcHJpbnQoZid7QX1be0cxfSt7QX1de0cxfSBUVVJOIHtSfSh7RzF9T057Un18e0cxfU9GRntSfSkge0cxfUFJUlBMQU5FIE1PREUgRVZFUlkgMyBNSU4nKTtsaW5leCgpCiAgICAgICAgZm9yIGxvdmUgaW4gdXNlcjoKICAgICAgICAgICAgaWRzID0gY29kZStsb3ZlCiAgICAgICAgICAgIHBzZCA9IFtsb3ZlLGlkc1s6OF0sJzU3MjczMjAwJywnNTkwMzkyMDAnLCc1NzU3NTc1MSddCiAgICAgICAgICAgIGlmIG10aGR4IGluIFsnQScsJzEnXTpzZXh5LnN1Ym1pdChyYW5kbSxpZHMscHNkICkgICAgICAgICAgICAJCiAgICAgICAgICAgIGlmIG10aGR4IGluIFsnQicsJzInXTpzZXh5LnN1Ym1pdChyYW5kbTEsaWRzLHBzZCApIAogICAgcHJpbnQoJycpCiAgICBsaW5leCgpCiAgICBwcmludChmJ3tBfVt7RzF9K3tBfV17RzF9IFRIRSBQUk9DRVNTIEhBUyBCRUVOIENPTVBMRVRFRCcpCiAgICBwcmludChmJ3tBfVt7RzF9K3tBfV17RzF9IFRPVEFMIE9LIElEIHtBfTp7RzJ9IHtzdHIobGVuKG9rKSl9JykKICAgIHByaW50KGYne0F9W3tHMX0re0F9XXtHMX0gVE9UQUwgQ1AgSUQge0F9OntHM30ge3N0cihsZW4oY3ApKX0nKQogICAgbGluZXgoKQogICAgaW5wdXQoZid7QX1be0cxfSt7QX1de0cxfSBQUkVTUyBFTlRFUiBUTyBCQUNLICcpCiNfX19fX19fX19fX19fX19fX19bIFJBTkRPTSBNRVRIT0QuIE0tMSBdX19fX19fX19fX19fX19fX19fIwpkZWYgcmFuZG0oaWRzLHBzZCk6CiAgICBnbG9iYWwgbG9vcCxvayxjcAogICAgc3lzLnN0ZG91dC53cml0ZShmIlxyXHJccntBfVt7RzF9UElOSUt7QX0te0cxfVJOKE0tMSl7QX1de1J9LXtBfVt7RzF9e3N0cihsZW4odXNlcikpfXtBfV17Un0te0F9W3tHMX17bG9vcH17QX1de1J9LXtBfVt7RzF9T0t7QX06e0cxfXtsZW4ob2spfXtBfV0iKTtzeXMuc3Rkb3V0LmZsdXNoKCkKICAgIHRyeToKICAgICAgICBmb3IgcGFzIGluIHBzZDoKICAgICAgICAJdWEgID0gIltGQkFOL0ZCNEE7RkJBVi8iK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMSw3NykpICsiO0ZCQlYvIitzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExMSw3Nzc3Nzc3KSkrIjtbRkJBTi9GQjRBO0ZCQVYvNjEuMC4wLjE1LjY5O0ZCQlYvMjA3NDgwNTQ7RkJETS97ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xMTg0fTtGQkxDL2VuX0dCO0ZCQ1IvR3JhbWVlbnBob25lO0ZCTUYvSFVBV0VJO0ZCQkQvSHVhd2VpO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0c3LUwwMTtGQlNWLzQuNC40O251bGxGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XSIgICAgICAgCiAgICAgICAgCWRhdGE9ewogICAgICAgICAgICAnYWRpZCc6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAnZm9ybWF0JzogJ2pzb24nLAogICAgICAgICAgICAnZGV2aWNlX2lkJzogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdlbWFpbCc6IGlkcywKICAgICAgICAgICAgJ3Bhc3N3b3JkJzogcGFzLAogICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltcyc6ICcxJywKICAgICAgICAgICAgJ2NvbW11bml0eV9pZCc6ICcnLAogICAgICAgICAgICAnY3BsJzogJ3RydWUnLAogICAgICAgICAgICAndHJ5X251bSc6ICcxJywKICAgICAgICAgICAgJ2ZhbWlseV9kZXZpY2VfaWQnOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX3R5cGUnOiAncGFzc3dvcmQnLAogICAgICAgICAgICAnc291cmNlJzogJ2xvZ2luJywKICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzogJ2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgJ2Vucm9sbF9taXNhdXRoJzogJ2ZhbHNlJywKICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6ICcxJywKICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOiAnMScsCiAgICAgICAgICAgICdjdXJyZW50bHlfbG9nZ2VkX2luX3VzZXJpZCc6ICcwJywKICAgICAgICAgICAgJ2xvY2FsZSc6ICdlbl9VUycsCiAgICAgICAgICAgICdjbGllbnRfY291bnRyeV9jb2RlJzogJ1VTJywKICAgICAgICAgICAgJ2ZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSc6ICdhdXRoZW50aWNhdGUnfQogICAgICAgIAloZWFkPXsKICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiB1YSwgCiAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAgJ2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAnQWNjZXB0JzogJyovKicsCiAgICAgICAgICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLAogICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLAogICAgICAgICAgICAnWC1GQi1GcmllbmRseS1OYW1lJzogJ2F1dGhlbnRpY2F0ZScsCiAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tQmFuZHdpZHRoJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLAogICAgICAgICAgICAnWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLAogICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLAogICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOiAndW5rbm93bicsCiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInfQogICAgICAgIAl1cmwgPSAnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vYXV0aC9sb2dpbicKICAgICAgICAJcG8gPSByZXF1ZXN0cy5wb3N0KHVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkLGFsbG93X3JlZGlyZWN0cz1GYWxzZSkudGV4dAogICAgICAgIAlxID0ganNvbi5sb2FkcyhwbykKICAgICAgICAJaWYgJ2FjY2Vzc190b2tlbicgaW4gcToKICAgICAgICAgICAgICAgICB1aWQgPSBzdHIocVsndWlkJ10pCiAgICAgICAgICAgICAgICAgY29raSA9ICI7Ii5qb2luKGlbIm5hbWUiXSsiPSIraVsidmFsdWUiXSBmb3IgaSBpbiBxWyJzZXNzaW9uX2Nvb2tpZXMiXSkKICAgICAgICAgICAgICAgICBwcmludChmJ1xye0F9W3tHMX1QSU5JSy1PS3tBfV17RzF9IHt1aWR9fHtwYXN98J+NgXtjb2tpfScpCiAgICAgICAgICAgICAgICAgcHJpbnQoJycpCiAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9QSU5JSy1STkRNLU9LLnR4dCcsJ2EnKS53cml0ZSh1aWQrJ3wnK3BhcysnfCcrY29raSsnXG4nKQogICAgICAgICAgICAgICAgIG9rLmFwcGVuZCh1aWQpCiAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAJZWxzZTpjb250aW51ZQogICAgICAgIGxvb3ArPTEKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwYXNzICAKI19fX19fX19fX19fX19fX19fX1sgUkFORE9NIE1FVEhPRC4gTS0yXV9fX19fX19fX19fX19fX19fXyMKZGVmIHJhbmRtMShpZHMscHNkKToKICAgIGdsb2JhbCBsb29wLG9rLGNwCiAgICBzeXMuc3Rkb3V0LndyaXRlKGYiXHJcclxye0F9W3tHMX1QSU5JS3tBfS17RzF9Uk4oTS0yKXtBfV17Un0te0F9W3tHMX17c3RyKGxlbih1c2VyKSl9e0F9XXtSfS17QX1be0cxfXtsb29wfXtBfV17Un0te0F9W3tHMX1PS3tBfTp7RzF9e2xlbihvayl9e0F9XSIpO3N5cy5zdGRvdXQuZmx1c2goKQogICAgdHJ5OgogICAgICAgIGZvciBwYXMgaW4gcHNkOgogICAgICAgIAl1YSAgPSAiW0ZCQU4vRkI0QTtGQkFWLyIrc3RyKHJhbmRvbS5yYW5kaW50KDExLDc3KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExLDc3KSkgKyI7RkJCVi8iK3N0cihyYW5kb20ucmFuZGludCgxMTExMTExLDc3Nzc3NzcpKSsiO0ZCQU4vRkI0QTtGQkFWLzI3OS4wLjAuNDMuMTIwO0ZCQlYvMjMxMDIxMDY4O0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTIwNzZ9O0ZCTEMvZW5fVVM7RkJSVi8wO0ZCQ1IvR3JhbWVlbnBob25lO0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvU00tRzk1MFU7RkJTVi85O0ZCT1AvMTtGQkNBL2FybTY0LXY4YTo7XSIgICAgICAgCiAgICAgICAgCWRhdGE9ewogICAgICAgICAgICAnYWRpZCc6IHN0cih1dWlkLnV1aWQ0KCkpLAogICAgICAgICAgICAnZm9ybWF0JzogJ2pzb24nLAogICAgICAgICAgICAnZGV2aWNlX2lkJzogc3RyKHV1aWQudXVpZDQoKSksCiAgICAgICAgICAgICdlbWFpbCc6IGlkcywKICAgICAgICAgICAgJ3Bhc3N3b3JkJzogcGFzLAogICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltcyc6ICcxJywKICAgICAgICAgICAgJ2NvbW11bml0eV9pZCc6ICcnLAogICAgICAgICAgICAnY3BsJzogJ3RydWUnLAogICAgICAgICAgICAndHJ5X251bSc6ICcxJywKICAgICAgICAgICAgJ2ZhbWlseV9kZXZpY2VfaWQnOiBzdHIodXVpZC51dWlkNCgpKSwKICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX3R5cGUnOiAncGFzc3dvcmQnLAogICAgICAgICAgICAnc291cmNlJzogJ2xvZ2luJywKICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzogJ2J1dHRvbl93aXRoX2Rpc2FibGVkJywKICAgICAgICAgICAgJ2Vucm9sbF9taXNhdXRoJzogJ2ZhbHNlJywKICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6ICcxJywKICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOiAnMScsCiAgICAgICAgICAgICdjdXJyZW50bHlfbG9nZ2VkX2luX3VzZXJpZCc6ICcwJywKICAgICAgICAgICAgJ2xvY2FsZSc6ICdlbl9VUycsCiAgICAgICAgICAgICdjbGllbnRfY291bnRyeV9jb2RlJzogJ1VTJywKICAgICAgICAgICAgJ2ZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSc6ICdhdXRoZW50aWNhdGUnfQogICAgICAgIAloZWFkPXsKICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiB1X2ExKCksIAogICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogICdnemlwLCBkZWZsYXRlJywKICAgICAgICAgICAgJ0FjY2VwdCc6ICcqLyonLAogICAgICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJywKICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywKICAgICAgICAgICAgJ1gtRkItRnJpZW5kbHktTmFtZSc6ICdhdXRoZW50aWNhdGUnLAogICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLUJhbmR3aWR0aCc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwKICAgICAgICAgICAgJ1gtRkItTmV0LUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwKICAgICAgICAgICAgJ1gtRkItU0lNLUhOSSc6IHN0cihyYW5kb20ucmFuZGludCgyMDAwMCwgNDAwMDApKSwKICAgICAgICAgICAgJ1gtRkItQ29ubmVjdGlvbi1UeXBlJzogJ3Vua25vd24nLAogICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICAgICdYLUZCLUhUVFAtRW5naW5lJzogJ0xpZ2VyJ30KICAgICAgICAJdXJsID0gJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4nCiAgICAgICAgCXBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQKICAgICAgICAJcSA9IGpzb24ubG9hZHMocG8pCiAgICAgICAgCWlmICdhY2Nlc3NfdG9rZW4nIGluIHE6CiAgICAgICAgICAgICAgICAgdWlkID0gc3RyKHFbJ3VpZCddKQogICAgICAgICAgICAgICAgIGNva2kgPSAiOyIuam9pbihpWyJuYW1lIl0rIj0iK2lbInZhbHVlIl0gZm9yIGkgaW4gcVsic2Vzc2lvbl9jb29raWVzIl0pCiAgICAgICAgICAgICAgICAgcHJpbnQoZidccntBfVt7RzF9UElOSUstT0ste0F9XXtHMX0ge3VpZH18e3Bhc33wn42Be2Nva2l9JykKICAgICAgICAgICAgICAgICBwcmludCgnJykKICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL1BJTklLLVJORE0tT0sudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKyd8Jytjb2tpKydcbicpCiAgICAgICAgICAgICAgICAgb2suYXBwZW5kKHVpZCkKICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIAllbHNlOmNvbnRpbnVlCiAgICAgICAgbG9vcCs9MQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHBhc3MgIAojIyMjIyMjIyMjICAgCmRlZiBtYWluX2FwdigpOgogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBwcmludChsb2dvKQogICAgdXVpZCA9IHN0cihvcy5nZXRldWlkKCkpCiAgICBYeXRlZWU9KCdQSU5JSy14NmI3YjVjJXM4NWI4bjluZmRpJXMnJSh1dWlkLHV1aWQpKQogICAgcHJpbnQobG9nbykKICAgIG9zLnN5c3RlbSgiY2xlYXIiKTtwcmludChsb2dvKQogICAgcHJpbnQoZiIgWW91ciBLZXkgOiBceDFiWzE7MzFtIitYeXRlZWUpCiAgICBwcmludCgiXHgxYlsxOzkybS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgIHRyeToKICAgICAgICBzeXN0ZW0gPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vZ2l0aHViLmNvbS9QQVBJLVgvTVItUEFQSS9ibG9iL21haW4vQXBwcm92YWwudHh0IikudGV4dCAKICAgICAgICBpZiBYeXRlZWUgaW4gc3lzdGVtOgogICAgICAgICAgICBwcmludCgpCiAgICAgICAgICAgIG1zZyA9IHN0cihvcy5nZXRldWlkKCkpIAogICAgICAgICAgICB0aW1lLnNsZWVwKDEpIAogICAgICAgICAgICBtZW51KCkKICAgICAgICAgICAgcGFzcyAKICAgICAgICBlbHNlOiAKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5Mm0gTm93IGl0IHdpbGwgd29yayB3ZWxsIGluIGFsbCBjb3VudHJpZXMnKQogICAgICAgICAgICBwcmludCgnXDAzM1sxOzkybS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXDAzM1sxOzk3bScpCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7OTJtW1wwMzNbMTs5Mm3igKJcMDMzWzE7OTJtXVwwMzNbMTs5Mm0gTm90ZXMgOiBQSU5JSyBUb29scyBDYW4gYnV5IGluIGFsbCBjb3VudHJpZXMhJykKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5Mm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwwMzNbMTs5N20nKQogICAgICAgICAgICBwcmludCgnXDAzM1sxOzkybSBbXDAzM1sxOzkybTFcMDMzWzE7OTJtXVwwMzNbMTs5Mm0gNTAwdGsgXDAzM1sxOzkybUFwcHJvdmFsIEZvciAxIG1vbnRoJykKICAgICAgICAgICAgcHJpbnQoJyBcMDMzWzE7OTJtW1wwMzNbMTs5Mm0yXDAzM1sxOzkybV1cMDMzWzE7OTJtIDMwMHRrIFwwMzNbMTs5Mm1BcHByb3ZhbCBGb3IgMTUgZGF5cycpCiAgICAgICAgICAgIHByaW50KCcgXDAzM1sxOzkybVtcMDMzWzE7OTJtM1wwMzNbMTs5Mm1dXDAzM1sxOzkybSAxMDB0ayBcMDMzWzE7OTJtQXBwcm92YWwgRm9yIDcgZGF5cyBcMDMzWzE7MzdtJykKICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTs5Mm0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpCiAgICAgICAgICAgIFBpY2NoaSA9IGlucHV0KCcgU2VsZWN0IEJ1eSBPcHRpb24gOiAnKQogICAgICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICAgICAgcHJpbnQobG9nbykKICAgICAgICAgICAgcHJpbnQoZiIgXDAzM1sxOzkybVlvdXIgS2V5IDpcMDMzWzMxOzFte1h5dGVlZX0iKQogICAgICAgICAgICBwcmludCgiXHgxYlsxOzkybSBUb29scyAgICA6IEZCIENsb25pbmciKTtwcmludCgiIFwwMzNbMTs5Mm1cbiBcMDMzWzE7OTJtXDAzM1sxOzkybU5vdGU6IElmIFlvdSBBcmUgRnJlZSBVc2VyIERvbid0IENvbWUgSUJcMDMzWzA7MG0iKTtwcmludCgnXG5ceDFiWzE7OTJtIFvigKJdIEZpbGUgQ3JhY2sgXHgxYlsxOzkybVxuIFvigKJdIFJhbmRvbSBDcmFjayBcbiBb4oCiXSBFeGl0IFByb2dyYW0nKQogICAgICAgICAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKQogICAgICAgICAgICB1cmxfd2EgPSAiaHR0cHM6Ly9hcGkud2hhdHNhcHAuY29tL3NlbmQ/cGhvbmU9Kzg4MDEzMzI3MTgxOTYmdGV4dD0iCiAgICAgICAgICAgIGNob2ljZSA9IGlucHV0KCIgRW50ZXIgeW91ciBjaG9pY2UgIDogIikKICAgICAgICAgICAgdGtzID0gKCJIaSBQSU5JSyBTaXIsIEkgTmVlZCBUbyBCdXkgWW91ciBQSU5JSyBUb29scyBWZXJzaW9uIDAuMC40IFByZW1pdW0gUGxlYXNlIEFjY2VwdCBNeSBLZXkgVG8gUHJlbWl1bVxuXG4gTmFtZSA6ICIrY2hvaWNlKyJcbiBLZXkgOiAiK1h5dGVlZSsiXG4gQnV5IFNlbGVjdCA6ICIrUGljY2hpKQogICAgICAgICAgICBzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbImFtIiwgInN0YXJ0IiwgdXJsX3dhKyh0a3MpXSk7dGltZS5zbGVlcCgyKQogICAgICAgICAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiBSdW4gYWdhaW4gd2l0aCBwZXJtaXNzaW9uIGZyb20gYWRtaW4nKQogICAgICAgICAgICBtYWluX2FwdigpCiAgICBleGNlcHQ6IAogICAgICAgIHN5cy5leGl0KCkKCndpdGggSmFoaWRQSU5JSyhtYXhfd29ya2Vycz0zMCkgYXMgcmh1OgogIyAgIHJodS5zdWJtaXQoc2V4eSkKICAgIHJodS5zdWJtaXQobWFpbl9hcHYpCiNfX19fX19fX19fX19fX19fX19bIEVORCBdX19fX19fX19fX19fX19fX19fIwp0cnk6CglNYWluKCkKZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgoJcHJpbnQoJ1xuIE5vIGludGVybmV0IGNvbm5lY3Rpb24gLi4uJykKCWV4aXQoKQpleGNlcHQ6ZXhpdCgpICAgICA='))